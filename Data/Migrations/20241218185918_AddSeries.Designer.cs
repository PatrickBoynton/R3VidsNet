// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using R3vids.Data;

#nullable disable

namespace R3vids.Data.Migrations
{
    [DbContext(typeof(VideoDbContext))]
    [Migration("20241218185918_AddSeries")]
    partial class AddSeries
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("R3vids.Models.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("R3vids.Models.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GenreCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfVideos")
                        .HasColumnType("integer");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("R3vids.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Duration")
                        .HasColumnType("numeric");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SeriesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("R3vids.Models.VideoNavigation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrentVideo")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PreviousVideo")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("VideoNavigation");
                });

            modelBuilder.Entity("R3vids.Models.VideoStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CurrentPlayTime")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsWatchLater")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastPlayed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Played")
                        .HasColumnType("boolean");

                    b.Property<int>("SelectionCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("VideoStatus");
                });

            modelBuilder.Entity("R3vids.Models.Video", b =>
                {
                    b.HasOne("R3vids.Models.Playlist", null)
                        .WithMany("Videos")
                        .HasForeignKey("PlaylistId");

                    b.HasOne("R3vids.Models.Series", "Series")
                        .WithMany("Videos")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("R3vids.Models.VideoStatus", b =>
                {
                    b.HasOne("R3vids.Models.Video", "Video")
                        .WithOne("VideoStatus")
                        .HasForeignKey("R3vids.Models.VideoStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("R3vids.Models.Playlist", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("R3vids.Models.Series", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("R3vids.Models.Video", b =>
                {
                    b.Navigation("VideoStatus")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
